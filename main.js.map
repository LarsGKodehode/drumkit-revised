{
  "version": 3,
  "sources": ["../src/data/instruments.js", "../src/main.js"],
  "sourcesContent": ["/**\n * Instrument list\n */\n const instruments = [\n    {\n        id: \"clap\",\n        sound: \"clap.mp3\",\n        code: \"KeyA\",\n        type: \"drum\",\n    },\n    {\n        id: \"hihat\",\n        sound: \"hihat.mp3\",\n        code: \"KeyS\",\n        type: \"drum\",\n    },\n    {\n        id: \"kick\",\n        sound: \"kick.mp3\",\n        code: \"KeyD\",\n        type: \"drum\",\n    },\n    {\n        id: \"openhat\",\n        sound: \"openhat.mp3\",\n        code: \"KeyF\",\n        type: \"drum\",\n    },\n    {\n        id: \"ride\",\n        sound: \"ride.mp3\",\n        code: \"KeyG\",\n        type: \"drum\",\n    },\n    {\n        id: \"snare\",\n        sound: \"snare.mp3\",\n        code: \"KeyH\",\n        type: \"drum\",\n    },\n    {\n        id: \"tink\",\n        sound: \"tink.mp3\",\n        code: \"KeyJ\",\n        type: \"drum\",\n    },\n    {\n        id: \"tom\",\n        sound: \"tom.mp3\",\n        code: \"KeyK\",\n        type: \"drum\",\n    },\n];\n\nexport default instruments;", "// ==================\n// Enviroment Variables\n// ==================\n\nconst SOUND_DIR = \"assets\";\nconst root = document.getElementById(\"root\");\nimport instruments from \"./data/instruments.js\";\n\n\n// ==========================\n// Setup hotkey functionality\n// ==========================\n\n/**\n * Creates a store for keybindings\n */\nfunction createKeyBindingBuffer() {\n    let functionStore = {};\n\n    /**\n     * Adds a keyDownEvent to listen for with a callback function\n     */\n    function bindKey(callback, key) {\n        functionStore[key] = callback;\n    };\n\n    /**\n     * @returns a specific callback for a keycode\n     */\n    function getCallback(keyCode) {\n        return functionStore[keyCode];\n    };\n\n    /**\n     * @returns a list of all registered keys\n     */\n    function list() {\n        const entries = Object.entries(functionStore);\n        return entries.map(entry => entry[0]);\n    };\n\n    return {\n        getCallback,\n        bindKey,\n        list,\n    };\n};\n\n\n/**\n * Creates a new keyboard listner\n */\nfunction createKeyboardListner(keyBindings) {\n    if(!keyBindings) {\n        console.trace(\"No keybindings object provided\");\n        console.dir(keyBindings);\n        return;\n    };\n\n    const controller = new AbortController();\n\n    /**\n     * Starts listning for keydown events\n     */\n    function start() {\n        document.addEventListener(\"keydown\", (event) => {\n            if(!(typeof(keyBindings.getCallback(event.code)) === \"function\")) return;\n        \n            keyBindings.getCallback(event.code)();\n            },\n            {signal: controller.signal},\n        );\n    };\n\n    return {\n        start,\n        /**\n         * Cancels listning for keydown events\n         */\n        stop: controller.abort,\n    };\n};\n\n\n// ============================\n// Load large files into memory\n// ============================\n\n/**\n * Creates a new array buffer for storing assets in memory\n */\nfunction createAssetBuffer() {\n    let buffer = [];\n    \n    /**\n     * Takes a path to an audio file and stores the audio file in the array buffer\n     * @return refrence to audio file\n     */\n     function addAsset(path) {\n        const newLength = buffer.push(new Audio(path));\n        return buffer[newLength - 1];\n    };\n\n    /**\n     * Lists all stored assets\n     */\n    function list() {\n        return Object.assign(buffer);\n    };\n\n    return {\n        list,\n        addAsset,\n    };\n};\n\n\n// ====================\n// Setting up the stage\n// ====================\n\n/**\n * Creates a new DOM node\n * @returns the node\n */\nfunction createNode(instrument, handleClick) {\n    const node = document.createElement(\"button\");\n\n    // Custumize node\n    node.textContent = String(instrument.id).charAt(0).toUpperCase() + instrument.id.slice(1);\n    node.classList = [\n        \"instrument\",\n        instrument.type,\n    ].join(\" \");\n    node.title = `Hotkey: ${instrument.code.slice(3)}`;\n\n    // Attach event handler\n    node.onclick = () => handleClick();\n\n    return node;\n};\n\n/**\n * Creates a single instrument with keybindings\n */\nfunction createInstrument(\n    {\n        root,\n        instrument,\n        soundFolder,\n        soundBuffer\n    }\n    ) {\n    const sound = soundBuffer.addAsset([soundFolder, instrument.sound].join(\"/\"));\n\n    /**\n     * Plays a audio file\n     */\n    function playSound() {\n        sound.currentTime = 0;\n        sound.play();\n    };\n\n    root.appendChild(createNode(instrument, playSound));\n\n    keyBindings.bindKey(() => playSound(), instrument.code);\n};\n\n/**\n * Create all the instruments\n */\nfunction createInstruments(options) {\n    instruments.forEach(instrument => createInstrument({instrument, ...options}));\n};\n\n\n// ==============================\n// Actually starting up the stuff\n// ==============================\n\nconst keyBindings =  createKeyBindingBuffer();\nconst keyboardListner = createKeyboardListner(keyBindings);\nconst soundBuffer = createAssetBuffer();\n\nconst instrumentsOptions = {\n    root: root,\n    soundFolder: SOUND_DIR,\n    soundBuffer: soundBuffer,\n};\ncreateInstruments(instrumentsOptions);\nkeyboardListner.start();"],
  "mappings": "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",
  "names": ["instruments", "instruments_default", "SOUND_DIR", "root", "createKeyBindingBuffer", "functionStore", "bindKey", "callback", "key", "getCallback", "keyCode", "list", "entry", "createKeyboardListner", "keyBindings", "controller", "start", "event", "createAssetBuffer", "buffer", "addAsset", "path", "newLength", "createNode", "instrument", "handleClick", "node", "createInstrument", "soundFolder", "soundBuffer", "sound", "playSound", "createInstruments", "options", "instruments_default", "keyboardListner", "instrumentsOptions"]
}
